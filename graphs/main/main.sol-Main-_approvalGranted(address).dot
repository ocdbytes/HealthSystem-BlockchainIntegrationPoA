digraph{
0[label="Node Type: ENTRY_POINT 0
"];
0->1;
1[label="Node Type: NEW VARIABLE 1

EXPRESSION:
totalApproveByPatient = TotalApprovedUsers[_patientAddress]

IRs:
REF_19(uint256) -> TotalApprovedUsers[_patientAddress]
totalApproveByPatient(uint256) := REF_19(uint256)"];
1->4;
2[label="Node Type: BEGIN_LOOP 2
"];
2->5;
3[label="Node Type: END_LOOP 3
"];
3->10;
4[label="Node Type: NEW VARIABLE 4

EXPRESSION:
i = 0

IRs:
i(uint256) := 0(uint256)"];
4->2;
5[label="Node Type: IF_LOOP 5

EXPRESSION:
i < totalApproveByPatient

IRs:
TMP_10(bool) = i < totalApproveByPatient
CONDITION TMP_10"];
5->6[label="True"];
5->3[label="False"];
6[label="Node Type: IF 6

EXPRESSION:
ApprovedUsers[_patientAddress][i] == msg.sender

IRs:
REF_20(mapping(uint256 => address)) -> ApprovedUsers[_patientAddress]
REF_21(address) -> REF_20[i]
TMP_11(bool) = REF_21 == msg.sender
CONDITION TMP_11"];
6->7[label="True"];
6->8[label="False"];
7[label="Node Type: RETURN 7

EXPRESSION:
true

IRs:
RETURN True"];
8[label="Node Type: END_IF 8
"];
8->9;
9[label="Node Type: EXPRESSION 9

EXPRESSION:
i ++

IRs:
TMP_12(uint256) := i(uint256)
i(uint256) = i (c)+ 1"];
9->5;
10[label="Node Type: RETURN 10

EXPRESSION:
false

IRs:
RETURN False"];
}
